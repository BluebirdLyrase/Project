{"has_more":false,"items":[{"owner":{"profile_image":"https://i.stack.imgur.com/7mgUt.jpg?s=128&g=1","display_name":"hpique"},"comment_count":0,"score":186,"accepted_answer_id":8548926,"answers":[{"owner":{"profile_image":"https://www.gravatar.com/avatar/f73c4c00ec7cdf972234eba85df70096?s=128&d=identicon&r=PG","display_name":"jarekrozanski"},"comment_count":0,"score":0,"is_accepted":false,"body":"<p>Currently, only MOBILE and WIFI is supported. Take a look and human readable <a href=\"http://developer.android.com/reference/android/net/NetworkInfo.html#getTypeName%28%29\" rel=\"nofollow noreferrer\">type function<\/a>.<\/p>\n","answer_id":2802510},{"owner":{"profile_image":"https://www.gravatar.com/avatar/15fa3819332b0c803deea11086587304?s=128&d=identicon&r=PG","display_name":"twk"},"comment_count":3,"score":53,"is_accepted":false,"comments":[{"owner":{"profile_image":"https://www.gravatar.com/avatar/34e1f216812d62d0ec02098af4d21f87?s=128&d=identicon&r=PG","display_name":"sehugg"},"score":0,"comment_id":3969044,"body":"WiMAX too, no? I had trouble figuring out what was an IP-capable network and what was not (MMS)"},{"owner":{"profile_image":"https://i.stack.imgur.com/THS6z.png?s=128&g=1","display_name":"Ernir Erlingsson"},"score":1,"comment_id":16896336,"body":"Get an instance of the class ConnectivityManager by calling  Context.getSystemService(Context.CONNECTIVITY_SERVICE)."},{"owner":{"profile_image":"https://lh6.googleusercontent.com/-ynYff-5UYg4/AAAAAAAAAAI/AAAAAAAAAoc/yVUDblFRUxI/photo.jpg?sz=128","display_name":"Aman Jham"},"score":0,"comment_id":52660972,"body":"how to check internet is there or not in wifi?? any one have solution"}],"body":"<p>You can use getSubtype() for more details.  Check out slide 9 here: <a href=\"http://dl.google.com/io/2009/pres/W_0300_CodingforLife-BatteryLifeThatIs.pdf\" rel=\"noreferrer\">http://dl.google.com/io/2009/pres/W_0300_CodingforLife-BatteryLifeThatIs.pdf<\/a><\/p>\n\n<pre><code>ConnectivityManager mConnectivity = null;\nTelephonyManager mTelephony = null;\n// Skip if no connection, or background data disabled\nNetworkInfo info = mConnectivity.getActiveNetworkInfo();\nif (info == null || !mConnectivity.getBackgroundDataSetting()) {\n    return false;\n}\n\n// Only update if WiFi or 3G is connected and not roaming\nint netType = info.getType();\nint netSubtype = info.getSubtype();\nif (netType == ConnectivityManager.TYPE_WIFI) {\n    return info.isConnected();\n} else if (netType == ConnectivityManager.TYPE_MOBILE\n    &amp;&amp; netSubtype == TelephonyManager.NETWORK_TYPE_UMTS\n    &amp;&amp; !mTelephony.isNetworkRoaming()) {\n        return info.isConnected();\n} else {\n    return false;\n}\n<\/code><\/pre>\n\n<p>Also, please check out Emil's answer for a more detailed dive into this.<\/p>\n","answer_id":2945774},{"owner":{"profile_image":"https://www.gravatar.com/avatar/0e3616fa71abd6c30910910d4d439470?s=128&d=identicon&r=PG","display_name":"Emil Davtyan"},"comment_count":7,"score":448,"is_accepted":true,"comments":[{"owner":{"display_name":"user1521536"},"score":10,"comment_id":18122660,"body":"Thanks. Btw, all constants for network types (<a href=\"http://developer.android.com/reference/android/telephony/TelephonyManager.html\" rel=\"nofollow noreferrer\">here<\/a>) are <code>public static final int<\/code>. So you don&#39;t need to do the &quot;hack&quot;. Just target to newest SDK, the compiler compiles the real values (integers) which they point to (not their instances) into bytecodes."},{"owner":{"profile_image":"https://www.gravatar.com/avatar/0e3616fa71abd6c30910910d4d439470?s=128&d=identicon&r=PG","display_name":"Emil Davtyan"},"score":3,"comment_id":21643200,"body":"@LaiVung When I answered this I had just started coding for Android and didn&#39;t know how to use the <code>targetSdkVersion<\/code> setting. I edited the post to remove the hack, thanks."},{"owner":{"profile_image":"https://i.stack.imgur.com/1YoSy.jpg?s=128&g=1","display_name":"Terranology"},"score":3,"comment_id":65873985,"body":"But, how can I know the wifi speed? Because maybe you obtain that you have a fast speed connection but your wifi is too slow..."},{"owner":{"profile_image":"https://www.gravatar.com/avatar/0d03b094bbe3aacfad245722955f72e7?s=128&d=identicon&r=PG&f=1","display_name":"Gabriel"},"score":1,"comment_id":69551483,"body":"Since all methods are static, this class could be declared final and have a private constructor."},{"owner":{"profile_image":"https://www.gravatar.com/avatar/f945085014ef162381d0e3f8afa93392?s=128&d=identicon&r=PG&f=1","display_name":"Sini"},"score":0,"comment_id":90236955,"body":"but this only checks if a network connection is available and not if there is indeed a internet connection? So you would need to ping a server e.g. in order to be 100% safe."},{"owner":{"profile_image":"https://www.gravatar.com/avatar/b142828ad59326a7ff64e7c782cd403f?s=128&d=identicon&r=PG","display_name":"oleynikd"},"score":0,"comment_id":91297738,"body":"<code>NetworkInfo.getType()<\/code> as well as most of <code>ConnectivityManager<\/code> constants are deprecated in API level 28"},{"owner":{"profile_image":"https://i.stack.imgur.com/oudcJ.png?s=128&g=1","display_name":"Arnold Brown"},"score":0,"comment_id":101447676,"body":"How to use this? Need to check all functions at once? Is(wifi or mobile)?"}],"body":"<p>If the problem is to find whether the phone's network is connected and fast enough to meet your demands you have to handle all the network types returned by <code>getSubType()<\/code>.<\/p>\n\n<p>It took me an hour or two to research and write this class to do just exactly that, and I thought I would share it with others that might find it useful.<\/p>\n\n<p>Here is a <a href=\"https://gist.github.com/emil2k/5130324\" rel=\"noreferrer\">Gist of the class<\/a>, so you can fork it and edited it.<\/p>\n\n<pre><code>package com.emil.android.util;\n\nimport android.content.Context;\nimport android.net.ConnectivityManager;\nimport android.net.NetworkInfo;\nimport android.telephony.TelephonyManager;\n\n/**\n * Check device's network connectivity and speed \n * @author emil http://stackoverflow.com/users/220710/emil\n *\n */\npublic class Connectivity {\n\n    /**\n     * Get the network info\n     * @param context\n     * @return\n     */\n    public static NetworkInfo getNetworkInfo(Context context){\n        ConnectivityManager cm = (ConnectivityManager) context.getSystemService(Context.CONNECTIVITY_SERVICE);\n        return cm.getActiveNetworkInfo();\n    }\n\n    /**\n     * Check if there is any connectivity\n     * @param context\n     * @return\n     */\n    public static boolean isConnected(Context context){\n        NetworkInfo info = Connectivity.getNetworkInfo(context);\n        return (info != null &amp;&amp; info.isConnected());\n    }\n\n    /**\n     * Check if there is any connectivity to a Wifi network\n     * @param context\n     * @return\n     */\n    public static boolean isConnectedWifi(Context context){\n        NetworkInfo info = Connectivity.getNetworkInfo(context);\n        return (info != null &amp;&amp; info.isConnected() &amp;&amp; info.getType() == ConnectivityManager.TYPE_WIFI);\n    }\n\n    /**\n     * Check if there is any connectivity to a mobile network\n     * @param context\n     * @return\n     */\n    public static boolean isConnectedMobile(Context context){\n        NetworkInfo info = Connectivity.getNetworkInfo(context);\n        return (info != null &amp;&amp; info.isConnected() &amp;&amp; info.getType() == ConnectivityManager.TYPE_MOBILE);\n    }\n\n    /**\n     * Check if there is fast connectivity\n     * @param context\n     * @return\n     */\n    public static boolean isConnectedFast(Context context){\n        NetworkInfo info = Connectivity.getNetworkInfo(context);\n        return (info != null &amp;&amp; info.isConnected() &amp;&amp; Connectivity.isConnectionFast(info.getType(),info.getSubtype()));\n    }\n\n    /**\n     * Check if the connection is fast\n     * @param type\n     * @param subType\n     * @return\n     */\n    public static boolean isConnectionFast(int type, int subType){\n        if(type==ConnectivityManager.TYPE_WIFI){\n            return true;\n        }else if(type==ConnectivityManager.TYPE_MOBILE){\n            switch(subType){\n            case TelephonyManager.NETWORK_TYPE_1xRTT:\n                return false; // ~ 50-100 kbps\n            case TelephonyManager.NETWORK_TYPE_CDMA:\n                return false; // ~ 14-64 kbps\n            case TelephonyManager.NETWORK_TYPE_EDGE:\n                return false; // ~ 50-100 kbps\n            case TelephonyManager.NETWORK_TYPE_EVDO_0:\n                return true; // ~ 400-1000 kbps\n            case TelephonyManager.NETWORK_TYPE_EVDO_A:\n                return true; // ~ 600-1400 kbps\n            case TelephonyManager.NETWORK_TYPE_GPRS:\n                return false; // ~ 100 kbps\n            case TelephonyManager.NETWORK_TYPE_HSDPA:\n                return true; // ~ 2-14 Mbps\n            case TelephonyManager.NETWORK_TYPE_HSPA:\n                return true; // ~ 700-1700 kbps\n            case TelephonyManager.NETWORK_TYPE_HSUPA:\n                return true; // ~ 1-23 Mbps\n            case TelephonyManager.NETWORK_TYPE_UMTS:\n                return true; // ~ 400-7000 kbps\n            /*\n             * Above API level 7, make sure to set android:targetSdkVersion \n             * to appropriate level to use these\n             */\n            case TelephonyManager.NETWORK_TYPE_EHRPD: // API level 11 \n                return true; // ~ 1-2 Mbps\n            case TelephonyManager.NETWORK_TYPE_EVDO_B: // API level 9\n                return true; // ~ 5 Mbps\n            case TelephonyManager.NETWORK_TYPE_HSPAP: // API level 13\n                return true; // ~ 10-20 Mbps\n            case TelephonyManager.NETWORK_TYPE_IDEN: // API level 8\n                return false; // ~25 kbps \n            case TelephonyManager.NETWORK_TYPE_LTE: // API level 11\n                return true; // ~ 10+ Mbps\n            // Unknown\n            case TelephonyManager.NETWORK_TYPE_UNKNOWN:\n            default:\n                return false;\n            }\n        }else{\n            return false;\n        }\n    }\n\n}\n<\/code><\/pre>\n\n<p>Also make sure to add this permission to you AndroidManifest.xml<\/p>\n\n<pre><code>&lt;uses-permission android:name=\"android.permission.ACCESS_NETWORK_STATE\"&gt;&lt;/uses-permission&gt;\n<\/code><\/pre>\n\n<p>Sources for network speeds include wikipedia &amp; <a href=\"http://3gstore.com/page/78_what_is_evdo_mobile_broadband.html\" rel=\"noreferrer\">http://3gstore.com/page/78_what_is_evdo_mobile_broadband.html<\/a><\/p>\n","answer_id":8548926},{"owner":{"profile_image":"https://i.stack.imgur.com/n7jEz.png?s=128&g=1","display_name":"j2emanue"},"comment_count":0,"score":1,"is_accepted":false,"body":"<pre><code>String active_network = ((ConnectivityManager)\n    .getSystemService(Context.CONNECTIVITY_SERVICE))\n    .getActiveNetworkInfo().getSubtypeName();\n<\/code><\/pre>\n\n<p>should get you the network name<\/p>\n","answer_id":12628409},{"owner":{"profile_image":"https://www.gravatar.com/avatar/257c7ce93970e683793ee1d38974ad13?s=128&d=identicon&r=PG","display_name":"Suchintya"},"comment_count":0,"score":13,"is_accepted":false,"body":"<p>@Emil's answer above is brilliant.<\/p>\n\n<p>Small addition: We should ideally use TelephonyManager to detect network types. So the above should instead read:<\/p>\n\n<pre><code>/**\n * Check if there is fast connectivity\n * @param context\n * @return\n */\npublic static boolean isConnectedFast(Context context){\n    ConnectivityManager cm = (ConnectivityManager) context.getSystemService(Context.CONNECTIVITY_SERVICE);\n    NetworkInfo info = cm.getActiveNetworkInfo();\n    TelephonyManager tm = (TelephonyManager) context.getSystemService(Context.TELEPHONY_SERVICE);\n    return (info != null &amp;&amp; info.isConnected() &amp;&amp; Connectivity.isConnectionFast(info.getType(), tm.getNetworkType()));\n}\n<\/code><\/pre>\n","answer_id":15157145},{"owner":{"profile_image":"https://i.stack.imgur.com/uTeBr.jpg?s=128&g=1","display_name":"ben75"},"comment_count":1,"score":59,"is_accepted":false,"comments":[{"owner":{"profile_image":"https://i.stack.imgur.com/6vVST.png?s=128&g=1","display_name":"Jyoti JK"},"score":0,"comment_id":85756358,"body":"what if NETWORK_TYPE_IWLAN"}],"body":"<p>To get a more precise (and user friendly) information about connection type. You can use this code (derived from a @hide method in <a href=\"https://android.googlesource.com/platform/frameworks/base/+/refs/tags/android-9.0.0_r45/telephony/java/android/telephony/TelephonyManager.java#2176\" rel=\"nofollow noreferrer\">TelephonyManager.java<\/a>).<\/p>\n\n<p>This method returns a String describing the current connection type. \n<br>i.e. one of : \"WIFI\" , \"2G\" , \"3G\" , \"4G\" , \"5G\" , \"-\" (not connected) or \"?\" (unknown)<\/p>\n\n<p>Remark: This code requires API 25+, but you can easily support older versions by using int instead of const. (See comments in code).<\/p>\n\n<pre><code>public static String getNetworkClass(Context context) {\n    ConnectivityManager cm = (ConnectivityManager) context.getSystemService(Context.CONNECTIVITY_SERVICE);      \n    NetworkInfo info = cm.getActiveNetworkInfo();\n    if (info == null || !info.isConnected())\n        return \"-\"; // not connected\n    if (info.getType() == ConnectivityManager.TYPE_WIFI)\n        return \"WIFI\";\n    if (info.getType() == ConnectivityManager.TYPE_MOBILE) {\n        int networkType = info.getSubtype();\n        switch (networkType) {\n            case TelephonyManager.NETWORK_TYPE_GPRS:\n            case TelephonyManager.NETWORK_TYPE_EDGE:\n            case TelephonyManager.NETWORK_TYPE_CDMA:\n            case TelephonyManager.NETWORK_TYPE_1xRTT:\n            case TelephonyManager.NETWORK_TYPE_IDEN:     // api&lt; 8: replace by 11\n            case TelephonyManager.NETWORK_TYPE_GSM:      // api&lt;25: replace by 16\n                return \"2G\";\n            case TelephonyManager.NETWORK_TYPE_UMTS:\n            case TelephonyManager.NETWORK_TYPE_EVDO_0:\n            case TelephonyManager.NETWORK_TYPE_EVDO_A:\n            case TelephonyManager.NETWORK_TYPE_HSDPA:\n            case TelephonyManager.NETWORK_TYPE_HSUPA:\n            case TelephonyManager.NETWORK_TYPE_HSPA:\n            case TelephonyManager.NETWORK_TYPE_EVDO_B:   // api&lt; 9: replace by 12\n            case TelephonyManager.NETWORK_TYPE_EHRPD:    // api&lt;11: replace by 14\n            case TelephonyManager.NETWORK_TYPE_HSPAP:    // api&lt;13: replace by 15\n            case TelephonyManager.NETWORK_TYPE_TD_SCDMA: // api&lt;25: replace by 17\n                return \"3G\";\n            case TelephonyManager.NETWORK_TYPE_LTE:      // api&lt;11: replace by 13\n            case TelephonyManager.NETWORK_TYPE_IWLAN:    // api&lt;25: replace by 18\n            case 19: // LTE_CA\n                return \"4G\";\n            case TelephonyManager.NETWORK_TYPE_NR:       // api&lt;29: replace by 20\n                return \"5G\";\n            default:\n                return \"?\";\n         }\n    }\n    return \"?\";\n}\n<\/code><\/pre>\n","answer_id":25912464},{"owner":{"profile_image":"https://lh6.googleusercontent.com/-Lt4Fvt_xdSQ/AAAAAAAAAAI/AAAAAAAACWc/f2LEBdUKOYI/photo.jpg?sz=128","display_name":"Chapz"},"comment_count":0,"score":2,"is_accepted":false,"body":"<p>On top of Emil's awsome answer I'd like to add one more method, for checking if you actually have Internet access as you could have data set to off on your phone. <\/p>\n\n<pre><code>public static boolean hasInternetAccess(Context c){\n    TelephonyManager tm = (TelephonyManager) c.getSystemService(Context.TELEPHONY_SERVICE);\n    if(isConnected(c) &amp;&amp; tm.getDataState() == TelephonyManager.DATA_CONNECTED)\n       return true;\n    else\n        return false;\n}\n<\/code><\/pre>\n\n<p>Note that this is only for checking if theres a cellular data connection and will return false if you have WiFi connected, as the cellular data is off when WiFi is connected.<\/p>\n","answer_id":27847469},{"owner":{"profile_image":"https://i.stack.imgur.com/3q8qF.jpg?s=128&g=1","display_name":"Jared Rummler"},"comment_count":5,"score":7,"is_accepted":false,"comments":[{"owner":{"profile_image":"https://www.gravatar.com/avatar/5fa00d3b78e40135bd905be5ef4c19e2?s=128&d=identicon&r=PG&f=1","display_name":"Joe"},"score":0,"comment_id":56010584,"body":"how to implement this to activity?"},{"owner":{"profile_image":"https://i.stack.imgur.com/3q8qF.jpg?s=128&g=1","display_name":"Jared Rummler"},"score":0,"comment_id":56010954,"body":"@Joe Copy the class to your project and then call one of the static utility methods from your activity. Example: <code>if (NetworkUtils.isWifiConnection(this) { &#47;* do stuff *&#47; }<\/code>"},{"owner":{"profile_image":"https://www.gravatar.com/avatar/76d11d82f4b09abd8412c30342b4e71e?s=128&d=identicon&r=PG&f=1","display_name":"iOS"},"score":0,"comment_id":94302980,"body":"@Jared Rummler can u help me, how to use this code in dual sim enable mobile ?"},{"owner":{"profile_image":"https://www.gravatar.com/avatar/76d11d82f4b09abd8412c30342b4e71e?s=128&d=identicon&r=PG&f=1","display_name":"iOS"},"score":0,"comment_id":94303315,"body":"@Jared Rummler, hai Jared Rummler can you help me... I&#39;m getting network type for only one SIM, but I need the result for dual SIM. If possible please help me...."},{"owner":{"profile_image":"https://i.stack.imgur.com/oudcJ.png?s=128&g=1","display_name":"Arnold Brown"},"score":0,"comment_id":101446690,"body":"@JaredRummler so should I want to check all functions to know which is available(or connected) to call my stuff ?"}],"body":"<p>The answer from Emil Davtyan is good, but network types have been added that are not accounted for in his answer. So, <code>isConnectionFast(int type, int subType)<\/code> may return false when it should be true.<\/p>\n\n<p>Here is a modified class which uses reflection to account for added network types in later APIs:<\/p>\n\n<pre><code>import android.content.Context;\nimport android.net.ConnectivityManager;\nimport android.net.NetworkInfo;\nimport android.telephony.TelephonyManager;\n\nimport java.lang.reflect.InvocationTargetException;\nimport java.lang.reflect.Method;\n\n/**\n * &lt;p&gt;Utility methods to check the current network connection status.&lt;/p&gt;\n *\n * &lt;p&gt;This requires the caller to hold the permission\n * {@link android.Manifest.permission#ACCESS_NETWORK_STATE}.&lt;/p&gt;\n */\npublic class NetworkUtils {\n\n  /** The absence of a connection type. */\n  public static final int TYPE_NONE = -1;\n\n  /** Unknown network class. */\n  public static final int NETWORK_CLASS_UNKNOWN = 0;\n  /** Class of broadly defined \"2G\" networks. */\n  public static final int NETWORK_CLASS_2_G = 1;\n  /** Class of broadly defined \"3G\" networks. */\n  public static final int NETWORK_CLASS_3_G = 2;\n  /** Class of broadly defined \"4G\" networks. */\n  public static final int NETWORK_CLASS_4_G = 3;\n\n  /**\n   * Returns details about the currently active default data network. When connected, this network\n   * is the default route for outgoing connections. You should always check {@link\n   * NetworkInfo#isConnected()} before initiating network traffic. This may return {@code null}\n   * when there is no default network.\n   *\n   * @return a {@link NetworkInfo} object for the current default network or {@code null} if no\n   * network default network is currently active\n   *\n   * This method requires the call to hold the permission\n   * {@link android.Manifest.permission#ACCESS_NETWORK_STATE}.\n   * @see ConnectivityManager#getActiveNetworkInfo()\n   */\n  public static NetworkInfo getInfo(Context context) {\n    return ((ConnectivityManager) context.getSystemService(Context.CONNECTIVITY_SERVICE))\n        .getActiveNetworkInfo();\n  }\n\n  /**\n   * Reports the current network type.\n   *\n   * @return {@link ConnectivityManager#TYPE_MOBILE}, {@link ConnectivityManager#TYPE_WIFI} ,\n   * {@link ConnectivityManager#TYPE_WIMAX}, {@link ConnectivityManager#TYPE_ETHERNET}, {@link\n   * ConnectivityManager#TYPE_BLUETOOTH}, or other types defined by {@link ConnectivityManager}.\n   * If there is no network connection then -1 is returned.\n   * @see NetworkInfo#getType()\n   */\n  public static int getType(Context context) {\n    NetworkInfo info = getInfo(context);\n    if (info == null || !info.isConnected()) {\n      return TYPE_NONE;\n    }\n    return info.getType();\n  }\n\n  /**\n   * Return a network-type-specific integer describing the subtype of the network.\n   *\n   * @return the network subtype\n   * @see NetworkInfo#getSubtype()\n   */\n  public static int getSubType(Context context) {\n    NetworkInfo info = getInfo(context);\n    if (info == null || !info.isConnected()) {\n      return TYPE_NONE;\n    }\n    return info.getSubtype();\n  }\n\n  /** Returns the NETWORK_TYPE_xxxx for current data connection. */\n  public static int getNetworkType(Context context) {\n    return ((TelephonyManager) context.getSystemService(Context.TELEPHONY_SERVICE))\n        .getNetworkType();\n  }\n\n  /** Check if there is any connectivity */\n  public static boolean isConnected(Context context) {\n    return getType(context) != TYPE_NONE;\n  }\n\n  /** Check if there is any connectivity to a Wifi network */\n  public static boolean isWifiConnection(Context context) {\n    NetworkInfo info = getInfo(context);\n    if (info == null || !info.isConnected()) {\n      return false;\n    }\n    switch (info.getType()) {\n      case ConnectivityManager.TYPE_WIFI:\n        return true;\n      default:\n        return false;\n    }\n  }\n\n  /** Check if there is any connectivity to a mobile network */\n  public static boolean isMobileConnection(Context context) {\n    NetworkInfo info = getInfo(context);\n    if (info == null || !info.isConnected()) {\n      return false;\n    }\n    switch (info.getType()) {\n      case ConnectivityManager.TYPE_MOBILE:\n        return true;\n      default:\n        return false;\n    }\n  }\n\n  /** Check if the current connection is fast. */\n  public static boolean isConnectionFast(Context context) {\n    NetworkInfo info = getInfo(context);\n    if (info == null || !info.isConnected()) {\n      return false;\n    }\n    switch (info.getType()) {\n      case ConnectivityManager.TYPE_WIFI:\n      case ConnectivityManager.TYPE_ETHERNET:\n        return true;\n      case ConnectivityManager.TYPE_MOBILE:\n        int networkClass = getNetworkClass(getNetworkType(context));\n        switch (networkClass) {\n          case NETWORK_CLASS_UNKNOWN:\n          case NETWORK_CLASS_2_G:\n            return false;\n          case NETWORK_CLASS_3_G:\n          case NETWORK_CLASS_4_G:\n            return true;\n        }\n      default:\n        return false;\n    }\n  }\n\n  private static int getNetworkClassReflect(int networkType)\n      throws NoSuchMethodException, InvocationTargetException, IllegalAccessException {\n    Method getNetworkClass = TelephonyManager.class.getDeclaredMethod(\"getNetworkClass\", int.class);\n    if (!getNetworkClass.isAccessible()) {\n      getNetworkClass.setAccessible(true);\n    }\n    return (int) getNetworkClass.invoke(null, networkType);\n  }\n\n  /**\n   * Return general class of network type, such as \"3G\" or \"4G\". In cases where classification is\n   * contentious, this method is conservative.\n   */\n  public static int getNetworkClass(int networkType) {\n    try {\n      return getNetworkClassReflect(networkType);\n    } catch (Exception ignored) {\n    }\n\n    switch (networkType) {\n      case TelephonyManager.NETWORK_TYPE_GPRS:\n      case 16: // TelephonyManager.NETWORK_TYPE_GSM:\n      case TelephonyManager.NETWORK_TYPE_EDGE:\n      case TelephonyManager.NETWORK_TYPE_CDMA:\n      case TelephonyManager.NETWORK_TYPE_1xRTT:\n      case TelephonyManager.NETWORK_TYPE_IDEN:\n        return NETWORK_CLASS_2_G;\n      case TelephonyManager.NETWORK_TYPE_UMTS:\n      case TelephonyManager.NETWORK_TYPE_EVDO_0:\n      case TelephonyManager.NETWORK_TYPE_EVDO_A:\n      case TelephonyManager.NETWORK_TYPE_HSDPA:\n      case TelephonyManager.NETWORK_TYPE_HSUPA:\n      case TelephonyManager.NETWORK_TYPE_HSPA:\n      case TelephonyManager.NETWORK_TYPE_EVDO_B:\n      case TelephonyManager.NETWORK_TYPE_EHRPD:\n      case TelephonyManager.NETWORK_TYPE_HSPAP:\n      case 17: // TelephonyManager.NETWORK_TYPE_TD_SCDMA:\n        return NETWORK_CLASS_3_G;\n      case TelephonyManager.NETWORK_TYPE_LTE:\n      case 18: // TelephonyManager.NETWORK_TYPE_IWLAN:\n        return NETWORK_CLASS_4_G;\n      default:\n        return NETWORK_CLASS_UNKNOWN;\n    }\n  }\n\n  private NetworkUtils() {\n    throw new AssertionError();\n  }\n\n}\n<\/code><\/pre>\n","answer_id":33684486},{"owner":{"profile_image":"https://i.stack.imgur.com/XMUIh.png?s=128&g=1","display_name":"Rahul Nagane"},"comment_count":0,"score":2,"is_accepted":false,"body":"<p>You can check like this<\/p>\n\n<pre><code>public void checktype() {\n    ConnectivityManager cm = (ConnectivityManager) this.getSystemService(Context.CONNECTIVITY_SERVICE);\n    NetworkInfo activeNetwork = cm.getActiveNetworkInfo();\n    if (activeNetwork != null) { // connected to the internet\n        if (activeNetwork.getType() == ConnectivityManager.TYPE_WIFI) {\n            // connected to wifi\n            Toast.makeText(this, activeNetwork.getTypeName(), Toast.LENGTH_SHORT).show();\n        } else if (activeNetwork.getType() == ConnectivityManager.TYPE_MOBILE) {\n            // connected to the mobile provider's data plan\n            Toast.makeText(this, activeNetwork.getTypeName(), Toast.LENGTH_SHORT).show();\n        }\n    }\n}\n<\/code><\/pre>\n","answer_id":38977493},{"owner":{"profile_image":"https://lh3.googleusercontent.com/-2c-9C8F987U/AAAAAAAAAAI/AAAAAAAAABI/OxXQXxzusUo/photo.jpg?sz=128","display_name":"Shafqat Kamal"},"comment_count":0,"score":4,"is_accepted":false,"body":"<p>You can make custom Method to accomplish this task.  <\/p>\n\n<pre><code>  public String getNetworkClass(Context context) {\n        TelephonyManager mTelephonyManager = (TelephonyManager)\n                context.getSystemService(Context.TELEPHONY_SERVICE);\n        int networkType = mTelephonyManager.getNetworkType();\n        switch (networkType) {\n            case TelephonyManager.NETWORK_TYPE_GPRS:\n            case TelephonyManager.NETWORK_TYPE_EDGE:\n            case TelephonyManager.NETWORK_TYPE_CDMA:\n            case TelephonyManager.NETWORK_TYPE_1xRTT:\n            case TelephonyManager.NETWORK_TYPE_IDEN:\n                return \"2G\";\n            case TelephonyManager.NETWORK_TYPE_UMTS:\n            case TelephonyManager.NETWORK_TYPE_EVDO_0:\n            case TelephonyManager.NETWORK_TYPE_EVDO_A:\n            case TelephonyManager.NETWORK_TYPE_HSDPA:\n            case TelephonyManager.NETWORK_TYPE_HSUPA:\n            case TelephonyManager.NETWORK_TYPE_HSPA:\n            case TelephonyManager.NETWORK_TYPE_EVDO_B:\n            case TelephonyManager.NETWORK_TYPE_EHRPD:\n            case TelephonyManager.NETWORK_TYPE_HSPAP:\n                return \"3G\";\n            case TelephonyManager.NETWORK_TYPE_LTE:\n                return \"4G\";\n            default:\n                return \"Unknown\";\n        }\n    }\n<\/code><\/pre>\n","answer_id":41999477},{"owner":{"profile_image":"https://i.stack.imgur.com/Jd3ok.png?s=128&g=1","display_name":"said_dev"},"comment_count":0,"score":0,"is_accepted":false,"body":"<p>You can try this: <\/p>\n\n<pre><code>public String ConnectionQuality() {\n    NetworkInfo info = getInfo(context);\n    if (info == null || !info.isConnected()) {\n      return \"UNKNOWN\";\n    }\n\n    if(info.getType() == ConnectivityManager.TYPE_WIFI) {\n        WifiManager wifiManager = (WifiManager) context.getSystemService(Context.WIFI_SERVICE);\n        int numberOfLevels = 5;\n        WifiInfo wifiInfo = wifiManager.getConnectionInfo();\n        int level = WifiManager.calculateSignalLevel(wifiInfo.getRssi(), numberOfLevels);\n        if(level == 2 )\n                return \"POOR\";\n            else if(level == 3 )\n                return \"MODERATE\";\n            else if(level == 4 )\n                return \"GOOD\";\n            else if(level == 5 )\n                return \"EXCELLENT\";\n            else\n            return \"UNKNOWN\";\n        }else if(info.getType() == ConnectivityManager.TYPE_MOBILE) {\n            int networkClass = getNetworkClass(getNetworkType(context));\n            if(networkClass == 1)\n                return \"POOR\";\n            else if(networkClass == 2 )\n                return \"GOOD\";\n            else if(networkClass == 3 )\n                return \"EXCELLENT\";\n            else\n                return \"UNKNOWN\";\n        }else\n            return \"UNKNOWN\";  \n}\n\npublic NetworkInfo getInfo(Context context) {\n    return ((ConnectivityManager) context.getSystemService(Context.CONNECTIVITY_SERVICE)).getActiveNetworkInfo();\n}\n\npublic int getNetworkClass(int networkType) {\n    try {\n      return getNetworkClassReflect(networkType);\n    }catch (Exception ignored) {\n    }\n\n    switch (networkType) {\n      case TelephonyManager.NETWORK_TYPE_GPRS:\n      case 16: // TelephonyManager.NETWORK_TYPE_GSM:\n      case TelephonyManager.NETWORK_TYPE_EDGE:\n      case TelephonyManager.NETWORK_TYPE_CDMA:\n      case TelephonyManager.NETWORK_TYPE_1xRTT:\n      case TelephonyManager.NETWORK_TYPE_IDEN:\n        return 1;\n      case TelephonyManager.NETWORK_TYPE_UMTS:\n      case TelephonyManager.NETWORK_TYPE_EVDO_0:\n      case TelephonyManager.NETWORK_TYPE_EVDO_A:\n      case TelephonyManager.NETWORK_TYPE_HSDPA:\n      case TelephonyManager.NETWORK_TYPE_HSUPA:\n      case TelephonyManager.NETWORK_TYPE_HSPA:\n      case TelephonyManager.NETWORK_TYPE_EVDO_B:\n      case TelephonyManager.NETWORK_TYPE_EHRPD:\n      case TelephonyManager.NETWORK_TYPE_HSPAP:\n      case 17: // TelephonyManager.NETWORK_TYPE_TD_SCDMA:\n        return 2;\n      case TelephonyManager.NETWORK_TYPE_LTE:\n      case 18: // TelephonyManager.NETWORK_TYPE_IWLAN:\n        return 3;\n      default:\n        return 0;\n    }\n}\n\nprivate int getNetworkClassReflect(int networkType) throws NoSuchMethodException, InvocationTargetException, IllegalAccessException {  \n    Method getNetworkClass = TelephonyManager.class.getDeclaredMethod(\"getNetworkClass\", int.class);\n    if (!getNetworkClass.isAccessible()) {\n      getNetworkClass.setAccessible(true);\n    }\n    return (Integer) getNetworkClass.invoke(null, networkType); \n}\n\npublic static int getNetworkType(Context context) {\n    return ((TelephonyManager) context.getSystemService(Context.TELEPHONY_SERVICE)).getNetworkType();\n}\n<\/code><\/pre>\n","answer_id":54753191},{"owner":{"profile_image":"https://lh4.googleusercontent.com/-mj872VL0v-I/AAAAAAAAAAI/AAAAAAAABIo/igezWYd4Af8/photo.jpg?sz=128","display_name":"sanjay"},"comment_count":0,"score":0,"is_accepted":false,"body":"<p>Detect the what type of network and getting the boolean value of isconnected or not use below snippet<\/p>\n\n<pre><code>import android.content.Context;\nimport android.net.ConnectivityManager;\nimport android.net.NetworkInfo;\nimport android.telephony.TelephonyManager;\npublic class NetworkManagerUtils {\n\n/**\n * Get the network info\n * @param context\n * @return\n */\npublic static NetworkInfo getNetworkInfo(Context context){\n    ConnectivityManager cm = (ConnectivityManager) context.getSystemService(Context.CONNECTIVITY_SERVICE);\n    return cm.getActiveNetworkInfo();\n}\n\n/**\n * Check if there is any connectivity\n * @param context\n * @return\n */\npublic static boolean isConnected(Context context){\n    NetworkInfo info = NetworkManagerUtils.getNetworkInfo(context);\n    return (info != null &amp;&amp; info.isConnected());\n}\n\n/**\n * Check if there is any connectivity to a Wifi network\n * @param context.\n * @param type\n * @return\n */\npublic static boolean isConnectedWifi(Context context){\n    NetworkInfo info = NetworkManagerUtils.getNetworkInfo(context);\n    return (info != null &amp;&amp; info.isConnected() &amp;&amp; info.getType() == ConnectivityManager.TYPE_WIFI);\n}\n\n/**\n * Check if there is any connectivity to a mobile network\n * @param context\n * @param type\n * @return\n */\npublic static boolean isConnectedMobile(Context context){\n    NetworkInfo info = NetworkManagerUtils.getNetworkInfo(context);\n    return (info != null &amp;&amp; info.isConnected() &amp;&amp; info.getType() == ConnectivityManager.TYPE_MOBILE);\n}\n\n/**\n * Check if there is fast connectivity\n * @param context\n * @return\n */\npublic static boolean isConnectedFast(Context context){\n    NetworkInfo info = NetworkManagerUtils.getNetworkInfo(context);\n    return (info != null &amp;&amp; info.isConnected() &amp;&amp; NetworkManagerUtils.isConnectionFast(info.getType(),info.getSubtype()));\n}\n\n/**\n * Check if the connection is fast\n * @param type\n * @param subType\n * @return\n */\npublic static boolean isConnectionFast(int type, int subType){\n    if(type== ConnectivityManager.TYPE_WIFI){\n        return true;\n    }else if(type==ConnectivityManager.TYPE_MOBILE){\n        switch(subType){\n            case TelephonyManager.NETWORK_TYPE_1xRTT:\n                return false; // ~ 50-100 kbps\n            case TelephonyManager.NETWORK_TYPE_CDMA:\n                return false; // ~ 14-64 kbps\n            case TelephonyManager.NETWORK_TYPE_EDGE:\n                return false; // ~ 50-100 kbps\n            case TelephonyManager.NETWORK_TYPE_EVDO_0:\n                return true; // ~ 400-1000 kbps\n            case TelephonyManager.NETWORK_TYPE_EVDO_A:\n                return true; // ~ 600-1400 kbps\n            case TelephonyManager.NETWORK_TYPE_GPRS:\n                return false; // ~ 100 kbps\n            case TelephonyManager.NETWORK_TYPE_HSDPA:\n                return true; // ~ 2-14 Mbps\n            case TelephonyManager.NETWORK_TYPE_HSPA:\n                return true; // ~ 700-1700 kbps\n            case TelephonyManager.NETWORK_TYPE_HSUPA:\n                return true; // ~ 1-23 Mbps\n            case TelephonyManager.NETWORK_TYPE_UMTS:\n                return true; // ~ 400-7000 kbps\n            /*\n             * Above API level 7, make sure to set android:targetSdkVersion\n             * to appropriate level to use these\n             */\n            case TelephonyManager.NETWORK_TYPE_EHRPD: // API level 11\n                return true; // ~ 1-2 Mbps\n            case TelephonyManager.NETWORK_TYPE_EVDO_B: // API level 9\n                return true; // ~ 5 Mbps\n            case TelephonyManager.NETWORK_TYPE_HSPAP: // API level 13\n                return true; // ~ 10-20 Mbps\n            case TelephonyManager.NETWORK_TYPE_IDEN: // API level 8\n                return false; // ~25 kbps\n            case TelephonyManager.NETWORK_TYPE_LTE: // API level 11\n                return true; // ~ 10+ Mbps\n            // Unknown\n            case TelephonyManager.NETWORK_TYPE_UNKNOWN:\n            default:\n                return false;\n        }\n    }else{\n        return false;\n    }\n}\npublic static String getNetworkClass(Context context) {\n    ConnectivityManager cm = (ConnectivityManager) context.getSystemService(Context.CONNECTIVITY_SERVICE);\n    NetworkInfo info = cm.getActiveNetworkInfo();\n    if (info == null || !info.isConnected())\n        return \"-\"; // not connected\n    if (info.getType() == ConnectivityManager.TYPE_WIFI)\n        return \"WIFI\";\n    if (info.getType() == ConnectivityManager.TYPE_MOBILE) {\n        int networkType = info.getSubtype();\n        switch (networkType) {\n            case TelephonyManager.NETWORK_TYPE_GPRS:\n            case TelephonyManager.NETWORK_TYPE_EDGE:\n            case TelephonyManager.NETWORK_TYPE_CDMA:\n            case TelephonyManager.NETWORK_TYPE_1xRTT:\n            case TelephonyManager.NETWORK_TYPE_IDEN:     // api&lt; 8: replace by 11\n            case TelephonyManager.NETWORK_TYPE_GSM:      // api&lt;25: replace by 16\n                return \"2G\";\n            case TelephonyManager.NETWORK_TYPE_UMTS:\n            case TelephonyManager.NETWORK_TYPE_EVDO_0:\n            case TelephonyManager.NETWORK_TYPE_EVDO_A:\n            case TelephonyManager.NETWORK_TYPE_HSDPA:\n            case TelephonyManager.NETWORK_TYPE_HSUPA:\n            case TelephonyManager.NETWORK_TYPE_HSPA:\n            case TelephonyManager.NETWORK_TYPE_EVDO_B:   // api&lt; 9: replace by 12\n            case TelephonyManager.NETWORK_TYPE_EHRPD:    // api&lt;11: replace by 14\n            case TelephonyManager.NETWORK_TYPE_HSPAP:    // api&lt;13: replace by 15\n            case TelephonyManager.NETWORK_TYPE_TD_SCDMA: // api&lt;25: replace by 17\n                return \"3G\";\n            case TelephonyManager.NETWORK_TYPE_LTE:      // api&lt;11: replace by 13\n            case TelephonyManager.NETWORK_TYPE_IWLAN:    // api&lt;25: replace by 18\n            case 19: // LTE_CA\n                return \"4G\";\n            default:\n                return \"?\";\n        }\n    }\n    return \"?\";\n}\n}\n<\/code><\/pre>\n\n<p>use this following the class pass the context you will the get network status like network type,fast network,etc.<\/p>\n","answer_id":59261587},{"owner":{"profile_image":"https://www.gravatar.com/avatar/4e1f1d9a1bc0d3fb50742b802910a939?s=128&d=identicon&r=PG&f=1","display_name":"Hasan El-Hefnawy"},"comment_count":0,"score":0,"is_accepted":false,"body":"<p>Shown below different ways to do that. Please, note that there are a lot of network types in ConnectivityManager class. Also, if API >= 21, you can check the network types in NetworkCapabilities class.<\/p>\n\n<pre><code>    ConnectivityMonitor connectivityMonitor = ConnectivityMonitor.getInstance(this);\n    boolean isWiFiConnected = connectivityMonitor.isWifiConnection();\n    boolean isMobileConnected = connectivityMonitor.isConnected(ConnectivityManager.TYPE_MOBILE);\n    Log.e(TAG, \"onCreate: isWiFiConnected \" + isWiFiConnected);\n    Log.e(TAG, \"onCreate: isMobileConnected \" + isMobileConnected);\n    ConnectivityMonitor.Listener connectivityListener = new ConnectivityMonitor.Listener() {\n        @Override\n        public void onConnectivityChanged(boolean connected, @Nullable NetworkInfo networkInfo) {\n            Log.e(TAG, \"onConnectivityChanged: connected \" + connected);\n            Log.e(TAG, \"onConnectivityChanged: networkInfo \" + networkInfo);\n            if (networkInfo != null) {\n                boolean isWiFiConnected = networkInfo.getType() == NetworkCapabilities.TRANSPORT_WIFI;\n                boolean isMobileConnected = networkInfo.getType() == NetworkCapabilities.TRANSPORT_CELLULAR;\n                Log.e(TAG, \"onConnectivityChanged: isWiFiConnected \" + isWiFiConnected);\n                Log.e(TAG, \"onConnectivityChanged: isMobileConnected \" + isMobileConnected);\n            }\n        }\n    };\n    connectivityMonitor.addListener(connectivityListener);\n<\/code><\/pre>\n","answer_id":61913323}],"last_activity_date":1589978173,"answer_count":13,"title":"Detect network connection type on Android","body":"<p>How do you detect the network connection type on Android?<\/p>\n\n<p>Is it through <code>ConnectivityManager.getActiveNetworkInfo().getType()<\/code>, and is the answer limited to Wifi and mobile?<\/p>\n","question_id":2802472,"tags":["android","networking","wifi","connectivity"]}]}
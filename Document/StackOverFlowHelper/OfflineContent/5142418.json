{"has_more":false,"items":[{"owner":{"profile_image":"https://www.gravatar.com/avatar/0f991af3360e1c039243ce45fab996bf?s=128&d=identicon&r=PG","display_name":"Hossein"},"comment_count":1,"score":987,"accepted_answer_id":5142453,"comments":[{"owner":{"profile_image":"https://www.gravatar.com/avatar/64abfd8239a7a5b3dd6393fb64c059b3?s=128&d=identicon&r=PG&f=1","display_name":"Russell Dias"},"score":3,"comment_id":5770818,"body":"<a href=\"http://stackoverflow.com/questions/944592/best-practice-for-python-assert\" title=\"best practice for python assert\">stackoverflow.com/questions/944592/&hellip;<\/a>"}],"answers":[{"owner":{"profile_image":"https://www.gravatar.com/avatar/f8256aabf1f8938bc2356b1fbeb227f4?s=128&d=identicon&r=PG","display_name":"slezica"},"comment_count":7,"score":1120,"is_accepted":true,"comments":[{"owner":{"profile_image":"https://i.stack.imgur.com/TqC4v.jpg?s=128&g=1","display_name":"Bob Stein"},"score":94,"comment_id":40490679,"body":"Nit: assert is a statement and not a function.  And <a href=\"http://legacy.python.org/dev/peps/pep-3105/\" rel=\"nofollow noreferrer\">unlike print<\/a>, in Python 3 it&#39;s <a href=\"https://docs.python.org/3/reference/simple_stmts.html#grammar-token-assert_stmt\" rel=\"nofollow noreferrer\">still a statement<\/a>."},{"owner":{"profile_image":"https://www.gravatar.com/avatar/7ba25a2a362f27cb8916fe34ec25beb9?s=128&d=identicon&r=PG&f=1","display_name":"Chaine"},"score":0,"comment_id":75796937,"body":"if not True, no error. if not False, error? Why is this?"},{"owner":{"profile_image":"https://i.stack.imgur.com/4p1sN.jpg?s=128&g=1","display_name":"Ant"},"score":2,"comment_id":77308772,"body":"@Chaine assert means &quot;make sure that *something&quot; is True&quot;. So assert a == 3 will make sure that a is equal to 3; if a is not equal to 3 (i.e. a==3 is False) then it will raise an error"},{"owner":{"profile_image":"https://www.gravatar.com/avatar/fb3af89e0d02269d8abb9f42c283bb8f?s=128&d=identicon&r=PG&f=1","display_name":"alpha_989"},"score":5,"comment_id":83486950,"body":"If I can just use the <code>if not condition: raise AssertError()<\/code>, why should I use assert? Are there any conditions under which assert is better other than just being a shorter form of <code>if not condition<\/code> statement?"},{"owner":{"profile_image":"https://www.gravatar.com/avatar/f8256aabf1f8938bc2356b1fbeb227f4?s=128&d=identicon&r=PG","display_name":"slezica"},"score":6,"comment_id":83593122,"body":"@alpha_989 a) it&#39;s shorter and more readable, b) you can disable assert statements when running the interpreter (not so with the manual <code>if<\/code>). Read the docs for more info :)"},{"owner":{"profile_image":"https://www.gravatar.com/avatar/924b3be9748e7750ae68a08577cdac20?s=128&d=identicon&r=PG","display_name":"lnshi"},"score":10,"comment_id":84266559,"body":"totally cannot get how does this answer get so many up votes, actually others answers also. the question is &quot;What is the use of \u201cassert\u201d in Python? &quot;, so it is asking: when to use, or more exactly: what is the usage scenario of <code>assert<\/code>, but after reading all answers, i totally got nothing i want!"},{"owner":{"profile_image":"https://i.stack.imgur.com/dNiK6.jpg?s=128&g=1","display_name":"gseattle"},"score":0,"comment_id":97079717,"body":"Example: At a <code>warn<\/code> in a module where I couldn&#39;t tell which of many same calls in my program triggered it, I simply added <code>assert 0<\/code> in that file, generating the additional traceback with my line number on the next time it hit, problem solved."}],"body":"<p>The <code>assert<\/code> statement exists in almost every programming language. It helps detect problems early in your program, where the cause is clear, rather than later as a side-effect of some other operation.<\/p>\n\n<p>When you do...<\/p>\n\n<pre><code>assert condition\n<\/code><\/pre>\n\n<p>... you're telling the program to test that condition, and immediately trigger an error if the condition is false.<\/p>\n\n<p>In Python, it's roughly equivalent to this:<\/p>\n\n<pre><code>if not condition:\n    raise AssertionError()\n<\/code><\/pre>\n\n<p>Try it in the Python shell:<\/p>\n\n<pre><code>&gt;&gt;&gt; assert True # nothing happens\n&gt;&gt;&gt; assert False\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nAssertionError\n<\/code><\/pre>\n\n<p>Assertions can include an optional message, and you can disable them when running the interpreter.<\/p>\n\n<p>To print a message if the assertion fails:<\/p>\n\n<pre><code>assert False, \"Oh no! This assertion failed!\"\n<\/code><\/pre>\n\n<p>Do <strong>not<\/strong> use parenthesis to call <code>assert<\/code> like a function. It is a statement. If you do <code>assert(condition, message)<\/code> you'll be running the <code>assert<\/code> with a <code>(condition, message)<\/code> tuple as first parameter.<\/p>\n\n<p>As for disabling them, when running <code>python<\/code> in optimized mode, where <code>__debug__<\/code> is <code>False<\/code>, assert statements will be ignored. Just pass the <code>-O<\/code> flag:<\/p>\n\n<pre><code>python -O script.py\n<\/code><\/pre>\n\n<p>See <a href=\"http://docs.python.org/reference/simple_stmts.html#assert\" rel=\"noreferrer\">here<\/a> for the relevant documentation.<\/p>\n","answer_id":5142453},{"owner":{"profile_image":"https://www.gravatar.com/avatar/c09be62155d4c437c7bfafff9b38aaa0?s=128&d=identicon&r=PG","display_name":"gruszczy"},"comment_count":1,"score":18,"is_accepted":false,"comments":[{"owner":{"profile_image":"https://i.stack.imgur.com/hsvpu.jpg?s=128&g=1","display_name":"dtc"},"score":0,"comment_id":106377290,"body":"i like this comment since it just explains what it is very plainly. my question is &quot;if i&#39;ve written a proper unit test, why would i need an assertion&quot;? that stuff doesn&#39;t run in production anyways."}],"body":"<p>From docs:<\/p>\n\n<blockquote>\n  <p>Assert statements are a convenient way to insert debugging assertions into a program<\/p>\n<\/blockquote>\n\n<p>You can read more here: <a href=\"http://docs.python.org/release/2.5.2/ref/assert.html\" rel=\"nofollow noreferrer\">http://docs.python.org/release/2.5.2/ref/assert.html<\/a><\/p>\n","answer_id":5142462},{"owner":{"profile_image":"https://www.gravatar.com/avatar/936f8c28b401a914224af1e0e9891633?s=128&d=identicon&r=PG","display_name":"Baltasarq"},"comment_count":4,"score":52,"is_accepted":false,"comments":[{"owner":{"display_name":"user1176501"},"score":0,"comment_id":28788231,"body":"So does that mean we can check in code in a situation like assert( 2 &gt; 5 ) and raise error else continue ?"},{"owner":{"profile_image":"https://i.stack.imgur.com/FgXQf.jpg?s=128&g=1","display_name":"pillmuncher"},"score":20,"comment_id":33045147,"body":"Lose the parens, assert is not a function."},{"owner":{"profile_image":"https://www.gravatar.com/avatar/bf11af111cab6e513d68e5e30762deb5?s=128&d=identicon&r=PG","display_name":"Evgeni Sergeev"},"score":2,"comment_id":50873851,"body":"Losing the parens is more important than it seems. See <a href=\"http://stackoverflow.com/a/30770447/1143274\">below<\/a>."},{"owner":{"profile_image":"https://www.gravatar.com/avatar/1d6c9fc211a9cda08a289aedb76814f2?s=128&d=identicon&r=PG","display_name":"Ron Burk"},"score":6,"comment_id":67958759,"body":"Assert actually dates back (long before &quot;contracts&quot;) to Turing, when he wrote one of the earliest papers on how programmers might tackle the rather daunting task of creating correct programs. Finding that paper is left as an exercise for the reader, since all programmers can benefit from becoming familiar with his work. :-) <a href=\"http://www.turingarchive.org/\" rel=\"nofollow noreferrer\">turingarchive.org<\/a>"}],"body":"<p>Others have already given you links to documentation.<\/p>\n\n<p>You can try the following in a interactive shell:<\/p>\n\n<pre><code>&gt;&gt;&gt; assert 5 &gt; 2\n&gt;&gt;&gt; assert 2 &gt; 5\nTraceback (most recent call last):\n  File \"&lt;string&gt;\", line 1, in &lt;fragment&gt;\nbuiltins.AssertionError:\n<\/code><\/pre>\n\n<p>The first statement does nothing, while the second raises an exception. This is the first hint: asserts are useful to check conditions that should be true in a given position of your code (usually, the beginning (preconditions) and the end of a function (postconditions)).<\/p>\n\n<p>Asserts are actually highly tied to programming by contract, which is a very useful engineering practice:<\/p>\n\n<p><a href=\"http://en.wikipedia.org/wiki/Design_by_contract\" rel=\"noreferrer\">http://en.wikipedia.org/wiki/Design_by_contract<\/a>.<\/p>\n","answer_id":5142480},{"owner":{"profile_image":"https://i.stack.imgur.com/M4sNv.jpg?s=128&g=1","display_name":"Neil Vass"},"comment_count":3,"score":137,"is_accepted":false,"comments":[{"owner":{"profile_image":"https://www.gravatar.com/avatar/fb3af89e0d02269d8abb9f42c283bb8f?s=128&d=identicon&r=PG&f=1","display_name":"alpha_989"},"score":0,"comment_id":83489352,"body":"Does this mean, that if a certain variable or correct input (according to the contract by which the program is written) could lead to crashing the program, when its run by the user (assuming that -O flag is used when the user runs the program), you should instead use the <code>if Not Error: raise Exception(\u201c this is a error\u201d)<\/code>? That way, the program will still show the source of the error, when the user runs it.."},{"owner":{"profile_image":"https://www.gravatar.com/avatar/fb3af89e0d02269d8abb9f42c283bb8f?s=128&d=identicon&r=PG&f=1","display_name":"alpha_989"},"score":0,"comment_id":83489356,"body":"On the other hand, if you expect that the program could error out because of incorrect logic/implementation of the code (but not due to an input which is according to the contract to the user of the program), you should use the <code>assert<\/code> statement? The assumption here is that when the program is released to the end user, you are using the -O flag, thus assuming that all the bugs have been removed. Hence, any error or program crash is due to input to the program which is valid as per the contract, but cant be handled by the program. So it should alert the user as such."},{"owner":{"profile_image":"https://i.stack.imgur.com/VKbXD.jpg?s=128&g=1","display_name":"Christopher Shroba"},"score":0,"comment_id":85785035,"body":"@alpha_989 that&#39;s exactly right.  I like to think of assertions as sanity checks that are only to help you as a developer to make sure that what you think is true is actually true while you develop."}],"body":"<p>As other answers have noted, <code>assert<\/code> is similar to throwing an exception if a given condition isn't true. An important difference is that assert statements get ignored if you compile your code with the optimization option <a href=\"https://docs.python.org/3/using/cmdline.html#cmdoption-o\" rel=\"noreferrer\"><code>-O<\/code><\/a>. The <a href=\"http://docs.python.org/reference/simple_stmts.html#the-assert-statement\" rel=\"noreferrer\">documentation<\/a> says that <code>assert expression<\/code> can better be described as being equivalent to <\/p>\n\n<pre><code>if __debug__:\n   if not expression: raise AssertionError\n<\/code><\/pre>\n\n<p>This can be useful if you want to thoroughly test your code, then release an optimized version when you're happy that none of your assertion cases fail - when optimization is on, the <code>__debug__<\/code> variable becomes False and the conditions will stop getting evaluated. This feature can also catch you out if you're relying on the asserts and don't realize they've disappeared.<\/p>\n","answer_id":5143044},{"owner":{"profile_image":"https://www.gravatar.com/avatar/740c1b9fae33eb899dc2770eb4170a73?s=128&d=identicon&r=PG","display_name":"Bohdan"},"comment_count":0,"score":18,"is_accepted":false,"body":"<p>The assert statement has two forms.<\/p>\n\n<p>The simple form, <code>assert &lt;expression&gt;<\/code>, is equivalent to<\/p>\n\n<pre><code>if __\u200bdebug__:\n    if not &lt;expression&gt;: raise AssertionError\n<\/code><\/pre>\n\n<p>The extended form, <code>assert &lt;expression1&gt;, &lt;expression2&gt;<\/code>, is equivalent to<\/p>\n\n<pre><code>if __\u200bdebug__:\n    if not &lt;expression1&gt;: raise AssertionError, &lt;expression2&gt;\n<\/code><\/pre>\n","answer_id":17560982},{"owner":{"profile_image":"https://www.gravatar.com/avatar/80eb60c725bbea959c1153159c6e6e58?s=128&d=identicon&r=PG","display_name":"Gaurav Agarwal"},"comment_count":0,"score":8,"is_accepted":false,"body":"<p>Here is a simple example, save this in file (let's say b.py)<\/p>\n\n<pre><code>def chkassert(num):\n    assert type(num) == int\n\n\nchkassert('a')\n<\/code><\/pre>\n\n<p>and the result when <code>$python b.py<\/code><\/p>\n\n<pre><code>Traceback (most recent call last):\n  File \"b.py\", line 5, in &lt;module&gt;\n    chkassert('a')\n  File \"b.py\", line 2, in chkassert\n    assert type(num) == int\nAssertionError\n<\/code><\/pre>\n","answer_id":21832218},{"owner":{"profile_image":"https://i.stack.imgur.com/7XGoc.jpg?s=128&g=1","display_name":"Jacob Abraham"},"comment_count":1,"score":17,"is_accepted":false,"comments":[{"owner":{"profile_image":"https://i.stack.imgur.com/8zSjE.png?s=128&g=1","display_name":"panofish"},"score":1,"comment_id":41024182,"body":"Also, assertions can often be used in unit testing programs.  <a href=\"http://stackoverflow.com/questions/1383/what-is-unit-testing\">stackoverflow.com/questions/1383/what-is-unit-testing<\/a>"}],"body":"<p>Assertions are a systematic way to check that the internal state of a program is as the programmer expected, with the goal of catching bugs. See the example below.<\/p>\n\n<pre><code>&gt;&gt;&gt; number = input('Enter a positive number:')\nEnter a positive number:-1\n&gt;&gt;&gt; assert (number &gt; 0), 'Only positive numbers are allowed!'\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nAssertionError: Only positive numbers are allowed!\n&gt;&gt;&gt; \n<\/code><\/pre>\n","answer_id":21887035},{"owner":{"profile_image":"https://i.stack.imgur.com/fYQGT.jpg?s=128&g=1","display_name":"abe312"},"comment_count":0,"score":7,"is_accepted":false,"body":"<p>if the statement after assert  is true then the program continues , but if the statement after assert is false then the program gives an error. Simple as that.<\/p>\n\n<p>e.g.:<\/p>\n\n<pre><code>assert 1&gt;0   #normal execution\nassert 0&gt;1   #Traceback (most recent call last):\n             #File \"&lt;pyshell#11&gt;\", line 1, in &lt;module&gt;\n             #assert 0&gt;1\n             #AssertionError\n<\/code><\/pre>\n","answer_id":26686348},{"owner":{"profile_image":"https://www.gravatar.com/avatar/1008ca69258e4a3dfb983633397796a3?s=128&d=identicon&r=PG&f=1","display_name":"bhavya joshi"},"comment_count":0,"score":-2,"is_accepted":false,"body":"<p>format :\n  assert Expression[,arguments]\nWhen assert encounters a statement,Python evaluates the expression.If the statement is not true,an exception is raised(assertionError).\nIf the assertion fails, Python uses ArgumentExpression as the argument for the AssertionError. AssertionError exceptions can be caught and handled like any other exception using the try-except statement, but if not handled, they will terminate the program and produce a traceback.\nExample:<\/p>\n\n<pre><code>def KelvinToFahrenheit(Temperature):    \n    assert (Temperature &gt;= 0),\"Colder than absolute zero!\"    \n    return ((Temperature-273)*1.8)+32    \nprint KelvinToFahrenheit(273)    \nprint int(KelvinToFahrenheit(505.78))    \nprint KelvinToFahrenheit(-5)    \n<\/code><\/pre>\n\n<p>When the above code is executed, it produces the following result:<\/p>\n\n<pre><code>32.0\n451\nTraceback (most recent call last):    \n  File \"test.py\", line 9, in &lt;module&gt;    \n    print KelvinToFahrenheit(-5)    \n  File \"test.py\", line 4, in KelvinToFahrenheit    \n    assert (Temperature &gt;= 0),\"Colder than absolute zero!\"    \nAssertionError: Colder than absolute zero!    \n<\/code><\/pre>\n","answer_id":27658790},{"owner":{"profile_image":"https://www.gravatar.com/avatar/bc7f5b9184a56ec08a1b54b811cb36e2?s=128&d=identicon&r=PG&f=1","display_name":"user2725012"},"comment_count":2,"score":-2,"is_accepted":false,"comments":[{"owner":{"profile_image":"https://www.gravatar.com/avatar/fb3af89e0d02269d8abb9f42c283bb8f?s=128&d=identicon&r=PG&f=1","display_name":"alpha_989"},"score":1,"comment_id":83487283,"body":"This will work, but from what I understand, asserts shouldn\u2019t be used for checking user-input, because they can be turned off at run-time. If you really want to enforce or validate user-input use the <code>if not user_key: raise ValueError()<\/code> Check last 2 paragraphs here: <a href=\"https://wiki.python.org/moin/UsingAssertionsEffectively\" rel=\"nofollow noreferrer\">wiki.python.org/moin/UsingAssertionsEffectively<\/a>"},{"owner":{"profile_image":"https://www.gravatar.com/avatar/a19e1f2f3bef0884aee1f284668fdb45?s=128&d=identicon&r=PG&f=1","display_name":"FluxIX"},"score":0,"comment_id":90994875,"body":"<code>assert<\/code> should not be used for input validation because either the validation will be stripped out if <code>__debug__<\/code> is <code>False<\/code>. Also using assertions for non-debug purposes can cause people to catch the resulting <code>AssertionError<\/code>s, which can make debugging more difficult instead of less."}],"body":"<pre><code>def getUser(self, id, Email):\n\n    user_key = id and id or Email\n\n    assert user_key\n<\/code><\/pre>\n\n<p>Can be used to ensure parameters are passed in the function call.<\/p>\n","answer_id":29232013},{"owner":{"profile_image":"https://www.gravatar.com/avatar/bf11af111cab6e513d68e5e30762deb5?s=128&d=identicon&r=PG","display_name":"Evgeni Sergeev"},"comment_count":10,"score":435,"is_accepted":false,"comments":[{"owner":{"profile_image":"https://i.stack.imgur.com/uFfUb.jpg?s=128&g=1","display_name":"superbeck"},"score":19,"comment_id":64044410,"body":"I came here looking for this exact info about parens and the follow message. Thanks."},{"owner":{"profile_image":"https://i.stack.imgur.com/Z0g8T.png?s=128&g=1","display_name":"SherylHohman"},"score":6,"comment_id":74468048,"body":"But <code>assert (2 + 2 = 5), &quot;Houston we&#39;ve got a problem&quot;<\/code> should be ok, yes?"},{"owner":{"profile_image":"https://i.stack.imgur.com/vou9q.jpg?s=128&g=1","display_name":"DarkCygnus"},"score":4,"comment_id":74752176,"body":"@SherylHohman you can also try to run that yourself and see if it works or not"},{"owner":{"profile_image":"https://www.gravatar.com/avatar/7a0108422b842227a6b9cc92a5c114a5?s=128&d=identicon&r=PG","display_name":"cowbert"},"score":2,"comment_id":78777052,"body":"Don&#39;t forget that people often use parentheses for PEP 8-compliant implicit line continuation  Also Also don&#39;t forget that tuples are not defined by parentheses but by the existence of the comma (tuples have nothing to do with parens except for the purposes of operator precedence)."},{"owner":{"profile_image":"https://i.stack.imgur.com/uIBJ7.gif?s=128&g=1","display_name":"n1k31t4"},"score":4,"comment_id":80665032,"body":"<code>assert (2 + 2 = 5), &quot;Houston we&#39;ve got a problem&quot;<\/code> won&#39;t work... but it has nothing to do with the assert statement, which is fine. Your condition won&#39;t work because it isn&#39;t a condition. Missing a second <code>=<\/code>."},{"owner":{"profile_image":"https://www.gravatar.com/avatar/fb3af89e0d02269d8abb9f42c283bb8f?s=128&d=identicon&r=PG&f=1","display_name":"alpha_989"},"score":1,"comment_id":83489160,"body":"@SherylHohman, <code>assert (2+2==5), \u201cHouston we\u2019ve got a problem<\/code> will evaluate to <code>assert False, \u201cHouston we\u2019ve got a problem<\/code>, and will thus raise the assertion error.  This is regardless of whether you have a space between <code>assert<\/code> and <code>(2+2==5)<\/code>. What the other commenters are talking about is when you pass <code>(2+2==5, \u201cHouston we\u2019ve got a problem\u201d)<\/code> as a input the assert function. So the input is really a tuple consisting of 2 terms <code>2+2==5<\/code> and \u201cHouston we\u2019ve got a problem`."},{"owner":{"profile_image":"https://www.gravatar.com/avatar/fb3af89e0d02269d8abb9f42c283bb8f?s=128&d=identicon&r=PG&f=1","display_name":"alpha_989"},"score":0,"comment_id":83489161,"body":"If you try <code>(1, 1) is True<\/code>, you will always get <code>True<\/code>. So <code>assert(2+2==5, \u201cHouston we\u2019ve got a problem\u201d)<\/code> evaluates to <code>assert(True)<\/code> so no error is raised."},{"owner":{"profile_image":"https://www.gravatar.com/avatar/d00bed357e72e099b39613a2a8bcdad0?s=128&d=identicon&r=PG&f=1","display_name":"Bungo"},"score":0,"comment_id":91869157,"body":"@alpha_989 Contrary to your remark, I tried <code>(1,1) is True<\/code> and got <code>False<\/code> (with Python 3.7.0). But <code>assert(1,1)<\/code> indeed does not trigger."},{"owner":{"profile_image":"https://www.gravatar.com/avatar/04866335d3ecd0c431de6a36af444c9f?s=128&d=identicon&r=PG&f=1","display_name":"jouell"},"score":1,"comment_id":95036939,"body":"How does the answer OPs question? It&#39;s good information but ancillary."},{"owner":{"profile_image":"https://www.gravatar.com/avatar/9b82c25cbde4d52888e6eccc44764b80?s=128&d=identicon&r=PG&f=1","display_name":"Goodbye SE"},"score":1,"comment_id":102167599,"body":"@Bungo you should use <code>==<\/code> to check for equality.<code>is<\/code>checks identity, that means whether both are the same object. Which they are not."}],"body":"<p>Watch out for the parentheses. As has been pointed out above, <a href=\"https://docs.python.org/3/reference/simple_stmts.html#assert\">in Python 3, <code>assert<\/code> is still a statement<\/a>, so by analogy with <code>print(..)<\/code>, one may extrapolate the same to <code>assert(..)<\/code> or <code>raise(..)<\/code> but you shouldn't.<\/p>\n\n<p>This is important because:<\/p>\n\n<pre><code>assert(2 + 2 == 5, \"Houston we've got a problem\")\n<\/code><\/pre>\n\n<p>won't work, unlike<\/p>\n\n<pre><code>assert 2 + 2 == 5, \"Houston we've got a problem\"\n<\/code><\/pre>\n\n<p>The reason the first one will not work is that <code>bool( (False, \"Houston we've got a problem\") )<\/code> evaluates to <code>True<\/code>.<\/p>\n\n<p>In the statement <code>assert(False)<\/code>, these are just redundant parentheses around <code>False<\/code>, which evaluate to their contents. But with <code>assert(False,)<\/code> the parentheses are now a tuple, and a non-empty tuple evaluates to <code>True<\/code> in a boolean context.<\/p>\n","answer_id":30770447},{"owner":{"profile_image":"https://lh5.googleusercontent.com/-HMwbAOtRjY4/AAAAAAAAAAI/AAAAAAAABQk/jXK1QQ0bfqw/photo.jpg?sz=128","display_name":"ytpillai"},"comment_count":0,"score":3,"is_accepted":false,"body":"<p>If you ever want to know exactly what a reserved function does in python, type in <code>help(enter_keyword)<\/code><\/p>\n\n<p>Make sure if you are entering a reserved keyword that you enter it as a string. <\/p>\n","answer_id":31445076},{"owner":{"profile_image":"https://www.gravatar.com/avatar/735408d2873c999957a9a4662efed167?s=128&d=identicon&r=PG","display_name":"dbader"},"comment_count":6,"score":53,"is_accepted":false,"comments":[{"owner":{"profile_image":"https://www.gravatar.com/avatar/fb3af89e0d02269d8abb9f42c283bb8f?s=128&d=identicon&r=PG&f=1","display_name":"alpha_989"},"score":0,"comment_id":83488454,"body":"Thanks for the article. Very helpful to understand <code>assert<\/code> statement and when to use this. I am trying to understand a number of terms that you introduced in the article."},{"owner":{"profile_image":"https://www.gravatar.com/avatar/fb3af89e0d02269d8abb9f42c283bb8f?s=128&d=identicon&r=PG&f=1","display_name":"alpha_989"},"score":0,"comment_id":83488464,"body":"I thought I would post the comments here so a lot more people might be benefited from the clarifications. Sorry if the questions are too naive."},{"owner":{"profile_image":"https://www.gravatar.com/avatar/fb3af89e0d02269d8abb9f42c283bb8f?s=128&d=identicon&r=PG&f=1","display_name":"alpha_989"},"score":0,"comment_id":83488513,"body":"In your blog that you linked, you give an example where you mentioned that ` assert 0 &lt;= price &lt;= product[&#39;price&#39;]` is correct, but using ` assert user.is_admin(), &#39;Must have admin privileges to delete&#39;` and <code>assert store.product_exists(product_id), &#39;Unknown product id&#39;<\/code> is not a good practice, because if the debug is turned off then the <code>user<\/code> even if not an <code>admin<\/code> will be able to delete the product. Do you consider <code>assert user.is_admin()<\/code> as a <code>unrecoverable<\/code> error? Why is this not a <code>self-check<\/code>?"},{"owner":{"profile_image":"https://www.gravatar.com/avatar/fb3af89e0d02269d8abb9f42c283bb8f?s=128&d=identicon&r=PG&f=1","display_name":"alpha_989"},"score":0,"comment_id":83488515,"body":"If you consider that \u2018user.is_admin()` is a user input and hence shouldn\u2019t be used in an <code>assert statement<\/code>, cant <code>price<\/code> also be considered a user input? Why do you consider <code>assert user.is_admin()<\/code> as data validation but not <code>assert price<\/code>?"},{"owner":{"profile_image":"https://www.gravatar.com/avatar/db39cecc6fcb9588dd972367cc32623d?s=128&d=identicon&r=PG","display_name":"Laryx Decidua"},"score":0,"comment_id":86348084,"body":"Note that you are required to sign up before you can read the tutorial @dbader was referring to in his answer. This requirement may not match your personal privacy preferences. Having said that, the answer here is excellent and IMO deserves more upvotes :-)"},{"owner":{"profile_image":"https://www.gravatar.com/avatar/735408d2873c999957a9a4662efed167?s=128&d=identicon&r=PG","display_name":"dbader"},"score":1,"comment_id":86686962,"body":"@LaryxDecidua Nope, you can just read it on my website, the tutorial is publicly available. Just hit escape or click the little &quot;x&quot; symbol if you&#39;re not interested in the newsletter. Hope this helps :-)"}],"body":"<p>The goal of an assertion in Python is to inform developers about <strong>unrecoverable<\/strong> errors in a program.<\/p>\n\n<p>Assertions are not intended to signal expected error conditions, like \u201cfile not found\u201d, where a user can take corrective action (or just try again).<\/p>\n\n<p>Another way to look at it is to say that assertions are <strong>internal self-checks<\/strong> in your code. They work by declaring some conditions as <em>impossible<\/em> in your code. If these conditions don\u2019t hold that means there\u2019s a bug in the program.<\/p>\n\n<p>If your program is bug-free, these conditions will never occur. But if one of them <em>does<\/em> occur the program will crash with an assertion error telling you exactly which \u201cimpossible\u201d condition was triggered. This makes it much easier to track down and fix bugs in your programs.<\/p>\n\n<p>Here\u2019s a summary from <a href=\"https://dbader.org/blog/python-assert-tutorial\" rel=\"noreferrer\">a tutorial on Python\u2019s assertions<\/a> I wrote:<\/p>\n\n<blockquote>\n  <p><strong>Python\u2019s assert statement is a debugging aid, not a mechanism for handling run-time errors.<\/strong> The goal of using assertions is to let developers find the likely root cause of a bug more quickly. An assertion error should never be raised unless there\u2019s a bug in your program.<\/p>\n<\/blockquote>\n","answer_id":41721518},{"owner":{"profile_image":"https://graph.facebook.com/10155401391533836/picture?type=large","display_name":"rianhariadi.com"},"comment_count":0,"score":-4,"is_accepted":false,"body":"<pre><code>&gt;&gt;&gt;this_is_very_complex_function_result = 9\n&gt;&gt;&gt;c = this_is_very_complex_function_result\n&gt;&gt;&gt;test_us = (c &lt; 4)\n\n&gt;&gt;&gt; #first we try without assert\n&gt;&gt;&gt;if test_us == True:\n    print(\"YES! I am right!\")\nelse:\n    print(\"I am Wrong, but the program still RUNS!\")\n\nI am Wrong, but the program still RUNS!\n\n\n&gt;&gt;&gt; #now we try with assert\n&gt;&gt;&gt; assert test_us\nTraceback (most recent call last):\n  File \"&lt;pyshell#52&gt;\", line 1, in &lt;module&gt;\n    assert test_us\nAssertionError\n&gt;&gt;&gt; \n<\/code><\/pre>\n","answer_id":43602018},{"owner":{"profile_image":"https://www.gravatar.com/avatar/fbf439c90d0a9480e0d8ea51e6bbd54f?s=128&d=identicon&r=PG&f=1","display_name":"ujjwal_bansal"},"comment_count":4,"score":-4,"is_accepted":false,"comments":[{"owner":{"profile_image":"https://www.gravatar.com/avatar/fe6bc2a51d294b0d1d65fa203e496c7a?s=128&d=identicon&r=PG&f=1","display_name":"c2huc2hu"},"score":2,"comment_id":77629628,"body":"please format your code properly. also, how does this improve on previous answers?"},{"owner":{"profile_image":"https://www.gravatar.com/avatar/fbf439c90d0a9480e0d8ea51e6bbd54f?s=128&d=identicon&r=PG&f=1","display_name":"ujjwal_bansal"},"score":0,"comment_id":77904795,"body":"is there any problem in my explanation?"},{"owner":{"profile_image":"https://www.gravatar.com/avatar/fe6bc2a51d294b0d1d65fa203e496c7a?s=128&d=identicon&r=PG&f=1","display_name":"c2huc2hu"},"score":0,"comment_id":77907822,"body":"your explanation doesn&#39;t add anything to the existing answers, and the poor grammar makes it hard to read. if you&#39;re looking for questions to answer, consider browsing the new questions feed."},{"owner":{"profile_image":"https://www.gravatar.com/avatar/a19e1f2f3bef0884aee1f284668fdb45?s=128&d=identicon&r=PG&f=1","display_name":"FluxIX"},"score":0,"comment_id":91997172,"body":"The provided answer does answer <i>how<\/i> to use an <code>assert<\/code>, but does not answer <i>when<\/i> to use (or not use) an <code>assert<\/code>."}],"body":"<p>Basically the assert keyword meaning is that if the condition is not true then it through an assertionerror else it continue for example in python.<\/p>\n\n<p>code-1<\/p>\n\n<pre><code>a=5\n\nb=6\n\nassert a==b\n<\/code><\/pre>\n\n<p>OUTPUT: <\/p>\n\n<pre><code>assert a==b\n\nAssertionError\n<\/code><\/pre>\n\n<p><strong>code-2<\/strong><\/p>\n\n<pre><code>a=5\n\nb=5\n\nassert a==b\n<\/code><\/pre>\n\n<p>OUTPUT: <\/p>\n\n<pre><code>Process finished with exit code 0\n<\/code><\/pre>\n","answer_id":45333579},{"owner":{"profile_image":"https://lh6.googleusercontent.com/-VcZFu00RIuo/AAAAAAAAAAI/AAAAAAAAABo/pYGYwxN_KJI/photo.jpg?sz=128","display_name":"Nitish Chauhan"},"comment_count":1,"score":3,"is_accepted":false,"comments":[{"owner":{"profile_image":"https://www.gravatar.com/avatar/a19e1f2f3bef0884aee1f284668fdb45?s=128&d=identicon&r=PG&f=1","display_name":"FluxIX"},"score":2,"comment_id":91997241,"body":"<code>assert<\/code> is useful in a debugging context, but should not be relied outside of a debugging context."}],"body":"<p>Python <strong>assert<\/strong> is basically a debugging aid which test condition for internal self-check of your code.\nAssert makes debugging really easy when your code gets into impossible edge cases. Assert check those impossible cases.<\/p>\n\n<p>Let's say there is a function to calculate price of item after discount :<\/p>\n\n<pre><code>def calculate_discount(price, discount):\n    discounted_price = price - [discount*price]\n    assert 0 &lt;= discounted_price &lt;= price\n    return discounted_price\n<\/code><\/pre>\n\n<p>here, discounted_price can never be less than 0 and greater than actual price. So, in case the above condition is violated assert raises an Assertion Error, which helps the developer to identify that something impossible had happened.<\/p>\n\n<p>Hope it helps :)<\/p>\n","answer_id":49844675},{"owner":{"profile_image":"https://i.stack.imgur.com/pnXzG.png?s=128&g=1","display_name":"U10-Forward"},"comment_count":1,"score":3,"is_accepted":false,"comments":[{"owner":{"profile_image":"https://www.gravatar.com/avatar/a19e1f2f3bef0884aee1f284668fdb45?s=128&d=identicon&r=PG&f=1","display_name":"FluxIX"},"score":0,"comment_id":91997224,"body":"The answer provides <i>how<\/i> to use an <code>assert<\/code>, but not <i>when<\/i> to use (or not use) an <code>assert<\/code>; also noting that an <code>assert<\/code> can be disabled if <code>__debug__<\/code> is <code>False<\/code> would be useful."}],"body":"<p>My short explanation is:<\/p>\n\n<ul>\n<li><code>assert<\/code> raises <code>AssertionError<\/code> if expression is false, otherwise just continues the code, and if there's a comma whatever it is it will be <code>AssertionError: whatever after comma<\/code>, and to code is like: <code>raise AssertionError(whatever after comma)<\/code><\/li>\n<\/ul>\n\n<p>A related tutorial about this:<\/p>\n\n<blockquote>\n  <p><a href=\"https://www.tutorialspoint.com/python/assertions_in_python.htm\" rel=\"nofollow noreferrer\">https://www.tutorialspoint.com/python/assertions_in_python.htm<\/a><\/p>\n<\/blockquote>\n","answer_id":52463393},{"owner":{"profile_image":"https://www.gravatar.com/avatar/5414357263ef617c7ab3eb067c22412d?s=128&d=identicon&r=PG","display_name":"avandeursen"},"comment_count":0,"score":4,"is_accepted":false,"body":"<p>As summarized concisely on the <a href=\"http://wiki.c2.com/?WhatAreAssertions\" rel=\"nofollow noreferrer\">C2 Wiki<\/a>:<\/p>\n\n<blockquote>\n  <p>An assertion is a boolean expression at a specific point in a program which will be true <em>unless there is a bug in the program.<\/em><\/p>\n<\/blockquote>\n\n<p>You can use an <code>assert<\/code> statement to document your understanding of the code at a particular program point. For example, you can document assumptions or guarantees about inputs (preconditions), program state (invariants), or outputs (postconditions).<\/p>\n\n<p>Should your assertion ever fail, this is an alert for you (or your successor) that your understanding of the program was wrong when you wrote it, and that it likely contains a bug.<\/p>\n\n<p>For more information, John Regehr has a wonderful blog post on the <a href=\"https://blog.regehr.org/archives/1091\" rel=\"nofollow noreferrer\">Use of Assertions<\/a>, which applies to the Python <code>assert<\/code> statement as well.<\/p>\n","answer_id":53681485},{"owner":{"profile_image":"https://i.stack.imgur.com/vMT8h.jpg?s=128&g=1","display_name":"slayer"},"comment_count":0,"score":5,"is_accepted":false,"body":"<p>The <code>assert<\/code> statement exists in almost every programming language. It helps detect problems early in your program, where the cause is clear, rather than later as a side-effect of some other operation. They always expect a <code>True<\/code> condition.<\/p>\n\n<p>When you do something like:<\/p>\n\n<pre><code>assert condition\n<\/code><\/pre>\n\n<p>You're telling the program to test that condition and immediately trigger an error if it is false.<\/p>\n\n<p>In Python, <a href=\"https://docs.python.org/2/reference/simple_stmts.html#the-assert-statement\" rel=\"noreferrer\"><code>assert<\/code> expression<\/a>, is equivalent to:<\/p>\n\n<pre><code>if __debug__:\n    if not &lt;expression&gt;: raise AssertionError\n<\/code><\/pre>\n\n<p>You can use the extended expression to pass an <strong>optional message<\/strong>:<\/p>\n\n<pre><code>if __debug__:\n    if not (expression_1): raise AssertionError(expression_2)\n<\/code><\/pre>\n\n<p>Try it in the Python interpreter:<\/p>\n\n<pre><code>&gt;&gt;&gt; assert True # Nothing happens because the condition returns a True value.\n&gt;&gt;&gt; assert False # A traceback is triggered because this evaluation did not yield an expected value.\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nAssertionError\n<\/code><\/pre>\n\n<p>There are some caveats to seen before using them mainly for those who deem to toggles between the <code>assert<\/code> and <code>if<\/code> statements. The aim to use <code>assert<\/code> is on occasions when the program verifies a condition and return a value that should stop the program immediately instead of taking some alternative way to bypass the error:<\/p>\n\n<h2>1. Parentheses<\/h2>\n\n<p>As you may have noticed, the <code>assert<\/code> statement uses two conditions. Hence, do <strong>not<\/strong> use parentheses to englobe them as one for obvious advice. If you do such as:<\/p>\n\n<pre><code>assert (condition, message)\n<\/code><\/pre>\n\n<p>Example:<\/p>\n\n<pre><code>&gt;&gt;&gt; assert (1==2, 1==1)\n&lt;stdin&gt;:1: SyntaxWarning: assertion is always true, perhaps remove parentheses?\n<\/code><\/pre>\n\n<p>You will be running the <code>assert<\/code> with a <code>(condition, message)<\/code> which represents a tuple as the first parameter, and this happens cause non-empty tuple in Python is <strong>always <code>True<\/code><\/strong>. However, you can do separately without problem:<\/p>\n\n<pre><code>assert (condition), \"message\"\n<\/code><\/pre>\n\n<p>Example:<\/p>\n\n<pre><code>&gt;&gt;&gt; assert (1==2), (\"This condition returns a %s value.\") % \"False\"\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nAssertionError: This condition returns a False value.\n<\/code><\/pre>\n\n<h2>2. Debug purpose<\/h2>\n\n<p>If you are wondering regarding when use <code>assert<\/code> statement. Take an example used in real life:<\/p>\n\n<p>* When your program tends to control each parameter entered by the user or whatever else:<\/p>\n\n<pre><code>def loremipsum(**kwargs):\n    kwargs.pop('bar') # return 0 if \"bar\" isn't in parameter\n    kwargs.setdefault('foo', type(self)) # returns `type(self)` value by default\n    assert (len(kwargs) == 0), \"unrecognized parameter passed in %s\" % ', '.join(kwargs.keys())\n<\/code><\/pre>\n\n<p>* Another case is on math when 0 or non-positive as a coefficient or constant on a certain equation:<\/p>\n\n<pre><code>def discount(item, percent):\n    price = int(item['price'] * (1.0 - percent))\n    print(price)\n    assert (0 &lt;= price &lt;= item['price']),\\\n            \"Discounted prices cannot be lower than 0 \"\\\n            \"and they cannot be higher than the original price.\"\n\n    return price\n<\/code><\/pre>\n\n<p>* or even a simple example of a boolean implementation:<\/p>\n\n<pre><code>def true(a, b):\n    assert (a == b), \"False\"\n    return 1\n\ndef false(a, b):\n    assert (a != b), \"True\"\n    return 0\n<\/code><\/pre>\n\n<h2>3. Data processing or data validation<\/h2>\n\n<p>The utmost importance is to not rely on the <code>assert<\/code> statement to execute data processing or data validation because this statement can be turned off on the Python initialization with <code>-O<\/code> or <code>-OO<\/code> flag \u2013 meaning value 1, 2, and 0 (as default), respectively \u2013 or <code>PYTHONOPTIMIZE<\/code> environment variable.<\/p>\n\n<p><strong>Value 1:<\/strong><\/p>\n\n<p>* asserts are disabled;<\/p>\n\n<p>* bytecode files are generated using <a href=\"https://www.python.org/dev/peps/pep-0488/\" rel=\"noreferrer\"><code>.pyo<\/code><\/a> extension instead of <code>.pyc<\/code>;<\/p>\n\n<p>* <code>sys.flags.optimize<\/code> is set to 1 (<code>True<\/code>);<\/p>\n\n<p>* and, <code>__debug__<\/code> is set to <code>False<\/code>;<\/p>\n\n<p><strong>Value 2:<\/strong> disables one more stuff<\/p>\n\n<p>* docstrings are disabled;<\/p>\n\n<p>Therefore, using the <code>assert<\/code> statement to validate a sort of expected data is extremely dangerous, implying even to some security issues. Then, if you need to validate some permission I recommend you <code>raise AuthError<\/code> instead. As a preconditional effective, an <code>assert<\/code> is commonly used by programmers on libraries or modules that do not have a user interact directly.<\/p>\n","answer_id":55773937},{"owner":{"profile_image":"https://www.gravatar.com/avatar/bbc12c764b93fa915b8e5384f521fe12?s=128&d=identicon&r=PG&f=1","display_name":"jferard"},"comment_count":0,"score":1,"is_accepted":false,"body":"<p>As written in other answers, <code>assert<\/code> statements are used to check the state of\nthe program at a given point.<\/p>\n\n<p>I won't repeat what was said about associated\nmessage, parentheses, or <code>-O<\/code> option and <code>__debug__<\/code> constant. Check also <a href=\"https://docs.python.org/3/reference/simple_stmts.html#assert\" rel=\"nofollow noreferrer\">the\ndoc<\/a> for first\nhand information. I will focus on your question: what is the use of <code>assert<\/code>?\nMore precisely, when (and when not) should one use <code>assert<\/code>?<\/p>\n\n<p>The <code>assert<\/code> statements are useful to debug a program, but discouraged to check user\ninput. I use the following rule of thumb: keep assertions to detect a <em>this\nshould not happen<\/em> situation. A user\ninput may be incorrect, e.g. a password too short, but this is not a <em>this\nshould not happen<\/em> case. If the diameter of a circle is not twice as large as its\nradius, you are in a <em>this should not happen<\/em> case.<\/p>\n\n<p>The most interesting, in my mind, use of <code>assert<\/code> is inspired by the\n<a href=\"https://en.wikipedia.org/wiki/Design_by_contract\" rel=\"nofollow noreferrer\">programming by contract<\/a> as\ndescribed by B. Meyer in [Object-Oriented Software Construction](\n<a href=\"https://www.eiffel.org/doc/eiffel/Object-Oriented_Software_Construction%2C_2nd_Edition\" rel=\"nofollow noreferrer\">https://www.eiffel.org/doc/eiffel/Object-Oriented_Software_Construction%2C_2nd_Edition<\/a>\n) and implemented in the [Eiffel programming language](\n<a href=\"https://en.wikipedia.org/wiki/Eiffel_(programming_language)\" rel=\"nofollow noreferrer\">https://en.wikipedia.org/wiki/Eiffel_(programming_language)<\/a>). You can't fully\nemulate programming by contract using the <code>assert<\/code> statement, but it's\ninteresting to keep the intent.<\/p>\n\n<p>Here's an example. Imagine you have to write a <code>head<\/code> function (like the\n[<code>head<\/code> function in Haskell](\n<a href=\"http://www.zvon.org/other/haskell/Outputprelude/head_f.html\" rel=\"nofollow noreferrer\">http://www.zvon.org/other/haskell/Outputprelude/head_f.html<\/a>)). The\nspecification you are given is: \"if the list is not empty, return the\nfirst item of a list\". Look at the following implementations:<\/p>\n\n<pre><code>&gt;&gt;&gt; def head1(xs): return xs[0]\n<\/code><\/pre>\n\n<p>And<\/p>\n\n<pre><code>&gt;&gt;&gt; def head2(xs):\n...     if len(xs) &gt; 0:\n...         return xs[0]\n...     else:\n...         return None\n<\/code><\/pre>\n\n<p><sub>(Yes, this can be written as <code>return xs[0] if xs else None<\/code>, but that's not the point)<\/sub>.<\/p>\n\n<p>If the list is not empty, both functions have the same result and this result\nis correct:<\/p>\n\n<pre><code>&gt;&gt;&gt; head1([1, 2, 3]) == head2([1, 2, 3]) == 1\nTrue\n<\/code><\/pre>\n\n<p>Hence, both implementations are (I hope) correct. They differ when you try to\ntake the head item of an empty list:<\/p>\n\n<pre><code>&gt;&gt;&gt; head1([])\nTraceback (most recent call last):\n...\nIndexError: list index out of range\n<\/code><\/pre>\n\n<p>But:<\/p>\n\n<pre><code>&gt;&gt;&gt; head2([]) is None\nTrue\n<\/code><\/pre>\n\n<p>Again, both implementations are correct, because no one should pass an empty\nlist to these functions (we are <em>out of the specification<\/em>). That's an\nincorrect call, but if you do such a call, anything can happen.\nOne function raises an exception, the other returns a special value.\nThe most important is: <strong>we can't rely on this behavior<\/strong>. If <code>xs<\/code> is empty,\nthis will work:<\/p>\n\n<pre><code>print(head2(xs))\n<\/code><\/pre>\n\n<p>But this will crash the program:<\/p>\n\n<pre><code>print(head1(xs))\n<\/code><\/pre>\n\n<p>To avoid some surprises, I would like to know when I'm passing some unexpected\nargument to a function. In other words: I would like to know when the observable\nbehavior is not reliable, because it depends on the implementation, not on the specification.\nOf course, I can read the specification, but programmers do not always read carefully\nthe docs.<\/p>\n\n<p>Imagine if I had a way to insert the specification into the code to get the\nfollowing effect: when I violate the specification, e.g by passing an empty\nlist to <code>head<\/code>, I get a warning. That would be a great help to write a correct\n(i.e. compliant with the specification) program. And that's where <code>assert<\/code>\nenters on the scene:<\/p>\n\n<pre><code>&gt;&gt;&gt; def head1(xs):\n...     assert len(xs) &gt; 0, \"The list must not be empty\"\n...     return xs[0]\n<\/code><\/pre>\n\n<p>And<\/p>\n\n<pre><code>&gt;&gt;&gt; def head2(xs):\n...     assert len(xs) &gt; 0, \"The list must not be empty\"\n...     if len(xs) &gt; 0:\n...         return xs[0]\n...     else:\n...         return None\n<\/code><\/pre>\n\n<p>Now, we have:<\/p>\n\n<pre><code>&gt;&gt;&gt; head1([])\nTraceback (most recent call last):\n...\nAssertionError: The list must not be empty\n<\/code><\/pre>\n\n<p>And:<\/p>\n\n<pre><code>&gt;&gt;&gt; head2([])\nTraceback (most recent call last):\n...\nAssertionError: The list must not be empty\n<\/code><\/pre>\n\n<p>Note that <code>head1<\/code> throws an <code>AssertionError<\/code>, not an <code>IndexError<\/code>. That's\nimportant because an <code>AssertionError<\/code> is not <em>any<\/em> runtime error: it signals a\nviolation of the specification. I wanted a warning, but I get an error.\nFortunately, I can disable the check (using the <code>-O<\/code> option),\nbut at my own risks. I will do it a crash is really expensive, and hope for the\nbest. Imagine my program is embedded in a spaceship that travels through a\nblack hole. I will disable assertions and hope the program is robust enough\nto not crash as long as possible.<\/p>\n\n<p>This example was only about preconditions, be you can use <code>assert<\/code> to check\npostconditions (the return value and/or the state) and invariants (state of a\nclass). Note that checking postconditions and invariants with <code>assert<\/code> can be\ncumbersome:<\/p>\n\n<ul>\n<li>for postconditions, you need to assign the return value to a variable, and\nmaybe to store the iniial state of the object if you are dealing with a method;<\/li>\n<li>for invariants, you have to check the state before and after a method call.<\/li>\n<\/ul>\n\n<p>You won't have something as sophisticated as Eiffel, but you can however\nimprove the overall quality of a program.<\/p>\n\n<hr>\n\n<p>To summarize, the <code>assert<\/code> statement is a convenient way to detect a <em>this\nshould not happen<\/em> situation. Violations of the specification (e.g. passing\nan empty list to <code>head<\/code>) are first class <em>this should not happen<\/em> situations.\nHence, while the <code>assert<\/code> statement may be used to detect any unexpected situation,\nit is a privilegied way to ensure that the specification is fulfilled.\nOnce you have inserted <code>assert<\/code> statements into the code to represent the\nspecification, we can hope you have improved the quality of the program because\nincorrect arguments, incorrect return values, incorrect states of a class...,\nwill be reported.<\/p>\n","answer_id":61509021},{"owner":{"profile_image":"https://www.gravatar.com/avatar/ada36c55d9abe0a67c17ca6b17f8b2bf?s=128&d=identicon&r=PG","display_name":"alwbtc"},"comment_count":0,"score":2,"is_accepted":false,"body":"<p>In Pycharm, if you use <code>assert<\/code> along with <code>isinstance<\/code> to declare an object's type, it will let you access the methods and attributes of the parent object while you are coding, it will auto-complete automatically.<\/p>\n\n<p>For example, let's say <code>self.object1.object2<\/code> is a <code>MyClass<\/code> object.<\/p>\n\n<pre><code>import MyClasss\n\ndef code_it(self):\n    testObject = self.object1.object2 # at this point, program doesn't know that testObject  is a MyClass object yet\n    assert isinstance(testObject , MyClasss) # now the program knows testObject is a MyClass object\n    testObject.do_it() # from this point on, PyCharm will be able to auto-complete when you are working on testObject\n<\/code><\/pre>\n","answer_id":61735222}],"answer_count":21,"title":"What is the use of &quot;assert&quot; in Python?","body":"<p>I have been reading some source code and in several places I have seen the usage of <code>assert<\/code>. <\/p>\n\n<p>What does it mean exactly? What is its usage?<\/p>\n","tags":["python","assert","assertions"]}]}